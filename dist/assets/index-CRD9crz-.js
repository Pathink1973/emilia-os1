(function(){const r=document.createElement("link").relList;if(r&&r.supports&&r.supports("modulepreload"))return;for(const t of document.querySelectorAll('link[rel="modulepreload"]'))e(t);new MutationObserver(t=>{for(const o of t)if(o.type==="childList")for(const a of o.addedNodes)a.tagName==="LINK"&&a.rel==="modulepreload"&&e(a)}).observe(document,{childList:!0,subtree:!0});function s(t){const o={};return t.integrity&&(o.integrity=t.integrity),t.referrerPolicy&&(o.referrerPolicy=t.referrerPolicy),t.crossOrigin==="use-credentials"?o.credentials="include":t.crossOrigin==="anonymous"?o.credentials="omit":o.credentials="same-origin",o}function e(t){if(t.ep)return;t.ep=!0;const o=s(t);fetch(t.href,o)}})();const g=()=>{const u=[];if(u.push("VITE_OPENAI_API_KEY"),console.error("OpenAI API Key is missing. Please check your Netlify environment variables and ensure VITE_OPENAI_API_KEY is set."),u.push("VITE_ELEVEN_LABS_API_KEY"),console.error("Eleven Labs API Key is missing. Please check your Netlify environment variables and ensure VITE_ELEVEN_LABS_API_KEY is set."),u.push("VITE_ELEVEN_LABS_VOICE_ID"),console.error("Eleven Labs Voice ID is missing. Please check your Netlify environment variables and ensure VITE_ELEVEN_LABS_VOICE_ID is set."),u.length>0){const r=`Missing environment variables: ${u.join(", ")}. Please check your .env file or Netlify environment variables.`;document.querySelector(".status").textContent=r}};g();const c={OPENAI_API_KEY:"",ELEVEN_LABS_API_KEY:"",ELEVEN_LABS_VOICE_ID:"",SYSTEM_PROMPT:`You are Emilia, an empathetic and thoughtful AI assistant. Your responses should be warm, 
                    engaging, and natural. Focus on building a genuine connection with the user while maintaining 
                    a calm and supportive tone. Be concise but meaningful in your responses.`};class m{constructor(){this.recordButton=document.getElementById("recordButton"),this.userInput=document.getElementById("userInput"),this.sendButton=document.getElementById("sendButton"),this.chatMessages=document.getElementById("chat-messages"),this.status=document.getElementById("status"),this.mediaRecorder=null,this.audioChunks=[],this.isRecording=!1,this.conversationHistory=[{role:"system",content:c.SYSTEM_PROMPT}],this.setupEventListeners()}async setupEventListeners(){this.recordButton.addEventListener("click",()=>this.toggleRecording()),this.sendButton.addEventListener("click",()=>this.handleUserInput()),this.userInput.addEventListener("keypress",r=>{r.key==="Enter"&&this.handleUserInput()})}async startRecording(){try{const r=await navigator.mediaDevices.getUserMedia({audio:{echoCancellation:!0,noiseSuppression:!0,channelCount:1,sampleRate:44100}});this.mediaRecorder=new MediaRecorder(r,{mimeType:"audio/webm;codecs=opus"}),this.audioChunks=[],this.mediaRecorder.addEventListener("dataavailable",s=>{s.data.size>0&&this.audioChunks.push(s.data)}),this.mediaRecorder.addEventListener("stop",async()=>{const s=new Blob(this.audioChunks,{type:"audio/webm;codecs=opus"});await this.processAudio(s),r.getTracks().forEach(e=>e.stop())}),this.mediaRecorder.start(),this.isRecording=!0,this.recordButton.classList.add("recording"),this.status.textContent="Recording..."}catch(r){console.error("Error accessing microphone:",r),this.status.textContent="Error: Could not access microphone. Please check permissions."}}stopRecording(){this.mediaRecorder&&this.isRecording&&(this.mediaRecorder.stop(),this.isRecording=!1,this.recordButton.classList.remove("recording"),this.status.textContent="Processing audio...")}toggleRecording(){this.isRecording?this.stopRecording():this.startRecording()}async processAudio(r){try{const s=await this.convertToWAV(r),e=await this.getTranscription(s);e&&(this.userInput.value=e,await this.handleUserInput())}catch(s){console.error("Error processing audio:",s),this.status.textContent="Error processing audio. Please try typing instead."}}async convertToWAV(r){const s=await r.arrayBuffer(),t=await new(window.AudioContext||window.webkitAudioContext)().decodeAudioData(s),o=this.audioBufferToWAV(t);return new Blob([o],{type:"audio/wav"})}audioBufferToWAV(r){const s=r.numberOfChannels,e=r.sampleRate,t=1,o=16,a=o/8,i=s*a,d=this.interleave(r),h=d.length*a,l=44,p=l+h,E=new ArrayBuffer(p),n=new DataView(E);return this.writeString(n,0,"RIFF"),n.setUint32(4,p-8,!0),this.writeString(n,8,"WAVE"),this.writeString(n,12,"fmt "),n.setUint32(16,16,!0),n.setUint16(20,t,!0),n.setUint16(22,s,!0),n.setUint32(24,e,!0),n.setUint32(28,e*i,!0),n.setUint16(32,i,!0),n.setUint16(34,o,!0),this.writeString(n,36,"data"),n.setUint32(40,h,!0),this.floatTo16BitPCM(n,l,d),E}writeString(r,s,e){for(let t=0;t<e.length;t++)r.setUint8(s+t,e.charCodeAt(t))}interleave(r){const s=r.numberOfChannels,e=r.length*s,t=new Float32Array(e);for(let o=0;o<s;o++){const a=r.getChannelData(o);for(let i=0;i<r.length;i++)t[i*s+o]=a[i]}return t}floatTo16BitPCM(r,s,e){for(let t=0;t<e.length;t++,s+=2){const o=Math.max(-1,Math.min(1,e[t]));r.setInt16(s,o<0?o*32768:o*32767,!0)}}async getTranscription(r){var s;try{if(!c.OPENAI_API_KEY)throw this.status.textContent="Error: OpenAI API Key is not configured",new Error("OpenAI API Key is not configured");const e=new FormData;e.append("file",r,"audio.wav"),e.append("model","whisper-1"),e.append("language","en");const t=await fetch("https://api.openai.com/v1/audio/transcriptions",{method:"POST",headers:{Authorization:`Bearer ${c.OPENAI_API_KEY}`},body:e});if(!t.ok){const i=((s=(await t.json().catch(()=>({}))).error)==null?void 0:s.message)||t.statusText;throw this.status.textContent=`Error: ${i}`,new Error(`OpenAI API error: ${t.status} - ${i}`)}const o=await t.json();if(!o||!o.text)throw this.status.textContent="Error: No transcription received",new Error("No transcription received from OpenAI");return this.status.textContent="Transcription received, generating response...",o.text}catch(e){throw console.error("Transcription error:",e),this.status.textContent.startsWith("Error:")||(this.status.textContent="Error: Failed to transcribe audio. Please try again."),e}}async handleUserInput(){const r=this.userInput.value.trim();if(r){this.userInput.value="",this.addMessage(r,"user");try{const s=await this.getAIResponse(r);if(s){const e=await this.textToSpeech(s);e&&new Audio(e).play()}}catch(s){console.error("Error in conversation:",s)}}}addMessage(r,s){const e=document.createElement("div");e.className=`message ${s}`,e.textContent=r,this.chatMessages.appendChild(e),this.chatMessages.scrollTop=this.chatMessages.scrollHeight}async getAIResponse(r){var s;try{if(!c.OPENAI_API_KEY)throw this.status.textContent="Error: OpenAI API Key is not configured",new Error("OpenAI API Key is not configured");this.conversationHistory.push({role:"user",content:r});const e=await fetch("https://api.openai.com/v1/chat/completions",{method:"POST",headers:{Authorization:`Bearer ${c.OPENAI_API_KEY}`,"Content-Type":"application/json"},body:JSON.stringify({model:"gpt-4",messages:this.conversationHistory,temperature:.7,max_tokens:150})});if(!e.ok){const i=((s=(await e.json().catch(()=>({}))).error)==null?void 0:s.message)||e.statusText;throw this.status.textContent=`Error: ${i}`,new Error(`OpenAI API error: ${e.status} - ${i}`)}const t=await e.json();if(!t.choices||!t.choices[0]||!t.choices[0].message)throw this.status.textContent="Error: Invalid response from AI",new Error("Invalid response from OpenAI");const o=t.choices[0].message.content;return this.conversationHistory.push({role:"assistant",content:o}),this.addMessage(o,"assistant"),this.status.textContent="Converting response to speech...",o}catch(e){throw console.error("AI Response error:",e),this.status.textContent.startsWith("Error:")||(this.status.textContent="Error: Failed to get AI response. Please try again."),e}}async textToSpeech(r){try{if(!c.ELEVEN_LABS_API_KEY||!c.ELEVEN_LABS_VOICE_ID)throw this.status.textContent="Error: Eleven Labs credentials are not configured",new Error("Eleven Labs credentials are not configured");const s=await fetch(`https://api.elevenlabs.io/v1/text-to-speech/${c.ELEVEN_LABS_VOICE_ID}`,{method:"POST",headers:{Accept:"audio/mpeg","xi-api-key":c.ELEVEN_LABS_API_KEY,"Content-Type":"application/json"},body:JSON.stringify({text:r,model_id:"eleven_monolingual_v1",voice_settings:{stability:.5,similarity_boost:.5}})});if(!s.ok){const t=await s.text();throw this.status.textContent=`Error: ${t}`,new Error(`Eleven Labs API error: ${s.status} - ${t}`)}const e=await s.blob();if(!e||e.size===0)throw this.status.textContent="Error: No audio received",new Error("No audio received from Eleven Labs");return this.status.textContent="Playing audio response...",URL.createObjectURL(e)}catch(s){throw console.error("Text-to-speech error:",s),this.status.textContent.startsWith("Error:")||(this.status.textContent="Error: Failed to convert text to speech. Please try again."),s}}}document.addEventListener("DOMContentLoaded",()=>{new m});
