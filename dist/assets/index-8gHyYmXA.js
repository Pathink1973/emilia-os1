(function(){const s=document.createElement("link").relList;if(s&&s.supports&&s.supports("modulepreload"))return;for(const i of document.querySelectorAll('link[rel="modulepreload"]'))t(i);new MutationObserver(i=>{for(const o of i)if(o.type==="childList")for(const r of o.addedNodes)r.tagName==="LINK"&&r.rel==="modulepreload"&&t(r)}).observe(document,{childList:!0,subtree:!0});function e(i){const o={};return i.integrity&&(o.integrity=i.integrity),i.referrerPolicy&&(o.referrerPolicy=i.referrerPolicy),i.crossOrigin==="use-credentials"?o.credentials="include":i.crossOrigin==="anonymous"?o.credentials="omit":o.credentials="same-origin",o}function t(i){if(i.ep)return;i.ep=!0;const o=e(i);fetch(i.href,o)}})();const h=()=>{const a=[];if(a.push("VITE_OPENAI_API_KEY"),console.error("OpenAI API Key is missing. Please check your Netlify environment variables and ensure VITE_OPENAI_API_KEY is set."),a.push("VITE_ELEVEN_LABS_API_KEY"),console.error("Eleven Labs API Key is missing. Please check your Netlify environment variables and ensure VITE_ELEVEN_LABS_API_KEY is set."),a.push("VITE_ELEVEN_LABS_VOICE_ID"),console.error("Eleven Labs Voice ID is missing. Please check your Netlify environment variables and ensure VITE_ELEVEN_LABS_VOICE_ID is set."),a.length>0){const s=`Missing environment variables: ${a.join(", ")}. Please check your .env file or Netlify environment variables.`;document.querySelector(".status").textContent=s}};h();const c={OPENAI_API_KEY:"",ELEVEN_LABS_API_KEY:"",ELEVEN_LABS_VOICE_ID:"",SYSTEM_PROMPT:`You are Emilia, an empathetic and thoughtful AI assistant. Your responses should be warm, 
                    engaging, and natural. Focus on building a genuine connection with the user while maintaining 
                    a calm and supportive tone. Be concise but meaningful in your responses.`};class l{constructor(s){this.container=s,this.init()}init(){const s=document.createElement("div");s.className="wave-container";for(let e=0;e<3;e++){const t=document.createElement("div");t.className="wave-bar",t.style.animation="waveAnimation 0.8s ease-in-out infinite",t.style.animationDelay=`${e*.15}s`,s.appendChild(t)}this.container.appendChild(s)}}const u=document.getElementById("waveAnimation");u&&new l(u);class m{constructor(){this.micButton=document.getElementById("micButton"),this.status=document.getElementById("status"),this.messagesContainer=document.getElementById("messages"),this.isRecording=!1,this.mediaRecorder=null,this.audioChunks=[],this.silenceTimer=null,this.SILENCE_THRESHOLD=3e3,this.conversationHistory=[{role:"system",content:c.SYSTEM_PROMPT}],this.lastStatusMessage=null,this.initializeEventListeners(),this.checkMicrophonePermissions()}initializeEventListeners(){this.micButton.addEventListener("click",()=>{this.isRecording?this.stopRecording():this.startRecording()})}async checkMicrophonePermissions(){try{(await navigator.mediaDevices.getUserMedia({audio:!0})).getTracks().forEach(e=>e.stop()),this.updateStatus("Click the microphone to start")}catch(s){console.error("Microphone permission error:",s),this.updateStatus("Error: Microphone permission denied")}}async startRecording(){try{const s={audio:{echoCancellation:!0,noiseSuppression:!0,autoGainControl:!0,channelCount:1,sampleRate:{ideal:44100}}};if(navigator.mediaDevices.getUserMedia){this.updateStatus("Requesting microphone access...");const e=await navigator.mediaDevices.getUserMedia(s),i=new(window.AudioContext||window.webkitAudioContext)().createMediaStreamSource(e);let o="audio/webm;codecs=opus";MediaRecorder.isTypeSupported(o)||(o="audio/mp4"),this.mediaRecorder=new MediaRecorder(e,{mimeType:o}),this.audioChunks=[],this.mediaRecorder.ondataavailable=r=>{r.data.size>0&&this.audioChunks.push(r.data)},this.mediaRecorder.onstart=()=>{this.isRecording=!0,this.micButton.classList.add("active"),this.updateStatus("Listening..."),this.silenceTimer&&clearTimeout(this.silenceTimer),this.silenceTimer=setTimeout(()=>{this.isRecording&&this.stopRecording()},this.SILENCE_THRESHOLD)},this.mediaRecorder.onstop=async()=>{e.getTracks().forEach(n=>n.stop()),this.silenceTimer&&clearTimeout(this.silenceTimer),this.audioChunks.length>0&&(this.updateStatus("Processing audio..."),await this.processAudio(new Blob(this.audioChunks,{type:o})))},this.mediaRecorder.start(100)}}catch(s){console.error("Recording error:",s),this.updateStatus("Error: Could not start recording")}}async stopRecording(){this.mediaRecorder&&this.isRecording&&(this.mediaRecorder.stop(),this.isRecording=!1,this.micButton.classList.remove("active"),this.updateStatus("Processing..."))}async processAudio(s){var e;try{this.updateStatus("Converting speech to text...");const t=new FormData;t.append("file",s,"audio.webm"),t.append("model","whisper-1"),t.append("language","en");const i=await fetch("https://api.openai.com/v1/audio/transcriptions",{method:"POST",headers:{Authorization:`Bearer ${c.OPENAI_API_KEY}`},body:t});if(!i.ok){const d=((e=(await i.json().catch(()=>({}))).error)==null?void 0:e.message)||i.statusText;throw this.updateStatus(`Error: ${d}`),new Error(`Whisper API error: ${i.status} - ${d}`)}const o=await i.json();if(!o.text)throw this.updateStatus("Error: No speech detected"),new Error("No speech detected");const r=o.text.trim();this.addMessage(r,"user"),this.updateStatus("Emilia is thinking...");const n=await this.getAIResponse(r);this.updateStatus(""),await this.textToSpeech(n)}catch(t){console.error("Audio processing error:",t),this.status.textContent.startsWith("Error:")||this.updateStatus("Error: Failed to process audio. Please try again.")}}addMessage(s,e){const t=document.createElement("div");t.className=`message ${e}`,t.textContent=s,this.messagesContainer.appendChild(t),t.scrollIntoView({behavior:"smooth",block:"end"})}updateStatus(s){this.status.textContent=s,this.lastStatusMessage&&this.lastStatusMessage.remove();const e=document.createElement("div");e.className="message status",e.textContent=s,this.messagesContainer.appendChild(e),this.lastStatusMessage=e,e.scrollIntoView({behavior:"smooth",block:"end"})}async getAIResponse(s){var e;try{if(!c.OPENAI_API_KEY)throw this.updateStatus("Error: OpenAI API Key is not configured"),new Error("OpenAI API Key is not configured");this.conversationHistory.push({role:"user",content:s});const t=await fetch("https://api.openai.com/v1/chat/completions",{method:"POST",headers:{Authorization:`Bearer ${c.OPENAI_API_KEY}`,"Content-Type":"application/json"},body:JSON.stringify({model:"gpt-4",messages:this.conversationHistory,temperature:.7,max_tokens:150})});if(!t.ok){const n=((e=(await t.json().catch(()=>({}))).error)==null?void 0:e.message)||t.statusText;throw this.updateStatus(`Error: ${n}`),new Error(`OpenAI API error: ${t.status} - ${n}`)}const i=await t.json();if(!i.choices||!i.choices[0]||!i.choices[0].message)throw this.updateStatus("Error: Invalid response from AI"),new Error("Invalid response from OpenAI");const o=i.choices[0].message.content;return this.conversationHistory.push({role:"assistant",content:o}),this.addMessage(o,"assistant"),this.updateStatus("Converting response to speech..."),o}catch(t){throw console.error("AI Response error:",t),this.status.textContent.startsWith("Error:")||this.updateStatus("Error: Failed to get AI response. Please try again."),t}}async textToSpeech(s){try{const e=await this.callElevenLabsAPI(s);if(e){const t=new Audio(e);return t.onended=()=>{},await t.play(),e}}catch(e){throw console.error("Text to speech error:",e),e}}async callElevenLabsAPI(s){throw this.updateStatus("Error: Eleven Labs credentials are not configured"),new Error("Eleven Labs credentials are not configured")}}new m;
